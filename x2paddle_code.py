import paddle
import math
from x2paddle.op_mapper.onnx2paddle import onnx_custom_layer as x2paddle_nn

class ONNXModel(paddle.nn.Layer):
    def __init__(self):
        super(ONNXModel, self).__init__()
        self.conv0 = paddle.nn.Conv2D(in_channels=3, out_channels=64, kernel_size=[3, 3], padding=1)
        self.batchnorm0 = paddle.nn.BatchNorm(num_channels=64, momentum=0.8999999761581421, epsilon=9.999999747378752e-06, is_test=True)
        self.relu0 = paddle.nn.ReLU()
        self.conv1 = paddle.nn.Conv2D(in_channels=64, out_channels=64, kernel_size=[3, 3], padding=1)
        self.batchnorm1 = paddle.nn.BatchNorm(num_channels=64, momentum=0.8999999761581421, epsilon=9.999999747378752e-06, is_test=True)
        self.relu1 = paddle.nn.ReLU()
        self.pool0 = paddle.nn.MaxPool2D(kernel_size=[2, 2], stride=2)
        self.conv2 = paddle.nn.Conv2D(in_channels=64, out_channels=128, kernel_size=[3, 3], padding=1)
        self.batchnorm2 = paddle.nn.BatchNorm(num_channels=128, momentum=0.8999999761581421, epsilon=9.999999747378752e-06, is_test=True)
        self.relu2 = paddle.nn.ReLU()
        self.conv3 = paddle.nn.Conv2D(in_channels=128, out_channels=128, kernel_size=[3, 3], padding=1)
        self.batchnorm3 = paddle.nn.BatchNorm(num_channels=128, momentum=0.8999999761581421, epsilon=9.999999747378752e-06, is_test=True)
        self.relu3 = paddle.nn.ReLU()
        self.pool1 = paddle.nn.MaxPool2D(kernel_size=[2, 2], stride=2)
        self.conv4 = paddle.nn.Conv2D(in_channels=128, out_channels=256, kernel_size=[3, 3], padding=1)
        self.batchnorm4 = paddle.nn.BatchNorm(num_channels=256, momentum=0.8999999761581421, epsilon=9.999999747378752e-06, is_test=True)
        self.relu4 = paddle.nn.ReLU()
        self.conv5 = paddle.nn.Conv2D(in_channels=256, out_channels=256, kernel_size=[3, 3], padding=1)
        self.batchnorm5 = paddle.nn.BatchNorm(num_channels=256, momentum=0.8999999761581421, epsilon=9.999999747378752e-06, is_test=True)
        self.relu5 = paddle.nn.ReLU()
        self.conv6 = paddle.nn.Conv2D(in_channels=256, out_channels=256, kernel_size=[3, 3], padding=1)
        self.batchnorm6 = paddle.nn.BatchNorm(num_channels=256, momentum=0.8999999761581421, epsilon=9.999999747378752e-06, is_test=True)
        self.relu6 = paddle.nn.ReLU()
        self.pool2 = paddle.nn.MaxPool2D(kernel_size=[2, 2], stride=2)
        self.conv7 = paddle.nn.Conv2D(in_channels=256, out_channels=512, kernel_size=[3, 3], padding=1)
        self.batchnorm7 = paddle.nn.BatchNorm(num_channels=512, momentum=0.8999999761581421, epsilon=9.999999747378752e-06, is_test=True)
        self.relu7 = paddle.nn.ReLU()
        self.conv8 = paddle.nn.Conv2D(in_channels=512, out_channels=512, kernel_size=[3, 3], padding=1)
        self.batchnorm8 = paddle.nn.BatchNorm(num_channels=512, momentum=0.8999999761581421, epsilon=9.999999747378752e-06, is_test=True)
        self.relu8 = paddle.nn.ReLU()
        self.conv9 = paddle.nn.Conv2D(in_channels=512, out_channels=512, kernel_size=[3, 3], padding=1)
        self.batchnorm9 = paddle.nn.BatchNorm(num_channels=512, momentum=0.8999999761581421, epsilon=9.999999747378752e-06, is_test=True)
        self.relu9 = paddle.nn.ReLU()
        self.pool3 = paddle.nn.MaxPool2D(kernel_size=[2, 2], stride=2)
        self.conv10 = paddle.nn.Conv2D(in_channels=512, out_channels=512, kernel_size=[3, 3], padding=1)
        self.batchnorm10 = paddle.nn.BatchNorm(num_channels=512, momentum=0.8999999761581421, epsilon=9.999999747378752e-06, is_test=True)
        self.relu10 = paddle.nn.ReLU()
        self.conv11 = paddle.nn.Conv2D(in_channels=512, out_channels=512, kernel_size=[3, 3], padding=1)
        self.batchnorm11 = paddle.nn.BatchNorm(num_channels=512, momentum=0.8999999761581421, epsilon=9.999999747378752e-06, is_test=True)
        self.pool4 = paddle.nn.MaxPool2D(kernel_size=[3, 3], stride=1, padding=1)
        self.conv12 = paddle.nn.Conv2D(in_channels=512, out_channels=1024, kernel_size=[3, 3], padding=6, dilation=6)
        self.conv13 = paddle.nn.Conv2D(in_channels=1024, out_channels=1024, kernel_size=[1, 1])
        self.conv14 = paddle.nn.Conv2D(in_channels=1536, out_channels=512, kernel_size=[1, 1])
        self.batchnorm12 = paddle.nn.BatchNorm(num_channels=512, momentum=0.8999999761581421, epsilon=9.999999747378752e-06, is_test=True)
        self.relu11 = paddle.nn.ReLU()
        self.conv15 = paddle.nn.Conv2D(in_channels=512, out_channels=256, kernel_size=[3, 3], padding=1)
        self.batchnorm13 = paddle.nn.BatchNorm(num_channels=256, momentum=0.8999999761581421, epsilon=9.999999747378752e-06, is_test=True)
        self.relu12 = paddle.nn.ReLU()
        self.conv16 = paddle.nn.Conv2D(in_channels=768, out_channels=256, kernel_size=[1, 1])
        self.batchnorm14 = paddle.nn.BatchNorm(num_channels=256, momentum=0.8999999761581421, epsilon=9.999999747378752e-06, is_test=True)
        self.relu13 = paddle.nn.ReLU()
        self.conv17 = paddle.nn.Conv2D(in_channels=256, out_channels=128, kernel_size=[3, 3], padding=1)
        self.batchnorm15 = paddle.nn.BatchNorm(num_channels=128, momentum=0.8999999761581421, epsilon=9.999999747378752e-06, is_test=True)
        self.relu14 = paddle.nn.ReLU()
        self.conv18 = paddle.nn.Conv2D(in_channels=384, out_channels=128, kernel_size=[1, 1])
        self.batchnorm16 = paddle.nn.BatchNorm(num_channels=128, momentum=0.8999999761581421, epsilon=9.999999747378752e-06, is_test=True)
        self.relu15 = paddle.nn.ReLU()
        self.conv19 = paddle.nn.Conv2D(in_channels=128, out_channels=64, kernel_size=[3, 3], padding=1)
        self.batchnorm17 = paddle.nn.BatchNorm(num_channels=64, momentum=0.8999999761581421, epsilon=9.999999747378752e-06, is_test=True)
        self.relu16 = paddle.nn.ReLU()
        self.conv20 = paddle.nn.Conv2D(in_channels=192, out_channels=64, kernel_size=[1, 1])
        self.batchnorm18 = paddle.nn.BatchNorm(num_channels=64, momentum=0.8999999761581421, epsilon=9.999999747378752e-06, is_test=True)
        self.relu17 = paddle.nn.ReLU()
        self.conv21 = paddle.nn.Conv2D(in_channels=64, out_channels=32, kernel_size=[3, 3], padding=1)
        self.batchnorm19 = paddle.nn.BatchNorm(num_channels=32, momentum=0.8999999761581421, epsilon=9.999999747378752e-06, is_test=True)
        self.relu18 = paddle.nn.ReLU()
        self.conv22 = paddle.nn.Conv2D(in_channels=32, out_channels=32, kernel_size=[3, 3], padding=1)
        self.relu19 = paddle.nn.ReLU()
        self.conv23 = paddle.nn.Conv2D(in_channels=32, out_channels=32, kernel_size=[3, 3], padding=1)
        self.relu20 = paddle.nn.ReLU()
        self.conv24 = paddle.nn.Conv2D(in_channels=32, out_channels=16, kernel_size=[3, 3], padding=1)
        self.relu21 = paddle.nn.ReLU()
        self.conv25 = paddle.nn.Conv2D(in_channels=16, out_channels=16, kernel_size=[1, 1])
        self.relu22 = paddle.nn.ReLU()
        self.conv26 = paddle.nn.Conv2D(in_channels=16, out_channels=2, kernel_size=[1, 1])

    def forward(self, x2paddle_input):
        x2paddle_205 = paddle.full(dtype='int64', shape=[1], fill_value=2)
        x2paddle_208 = paddle.full(dtype='int64', shape=[1], fill_value=3)
        x2paddle_231 = paddle.full(dtype='int64', shape=[1], fill_value=2)
        x2paddle_234 = paddle.full(dtype='int64', shape=[1], fill_value=3)
        x2paddle_257 = paddle.full(dtype='int64', shape=[1], fill_value=2)
        x2paddle_260 = paddle.full(dtype='int64', shape=[1], fill_value=3)
        x2paddle_155 = self.conv0(x2paddle_input)
        x2paddle_156 = self.batchnorm0(x2paddle_155)
        x2paddle_157 = self.relu0(x2paddle_156)
        x2paddle_158 = self.conv1(x2paddle_157)
        x2paddle_159 = self.batchnorm1(x2paddle_158)
        x2paddle_160 = self.relu1(x2paddle_159)
        x2paddle_161 = self.pool0(x2paddle_160)
        x2paddle_162 = self.conv2(x2paddle_161)
        x2paddle_163 = self.batchnorm2(x2paddle_162)
        x2paddle_164 = self.relu2(x2paddle_163)
        x2paddle_165 = self.conv3(x2paddle_164)
        x2paddle_166 = self.batchnorm3(x2paddle_165)
        x2paddle_167 = self.relu3(x2paddle_166)
        x2paddle_168 = self.pool1(x2paddle_167)
        x2paddle_256 = paddle.shape(input=x2paddle_167)
        x2paddle_256 = paddle.cast(x=x2paddle_256, dtype='int64')
        x2paddle_259 = paddle.shape(input=x2paddle_167)
        x2paddle_259 = paddle.cast(x=x2paddle_259, dtype='int64')
        x2paddle_169 = self.conv4(x2paddle_168)
        x2paddle_258 = paddle.gather(x=x2paddle_256, index=x2paddle_257)
        x2paddle_261 = paddle.gather(x=x2paddle_259, index=x2paddle_260)
        x2paddle_170 = self.batchnorm4(x2paddle_169)
        x2paddle_262 = paddle.reshape(x=x2paddle_258, shape=[1])
        x2paddle_263 = paddle.reshape(x=x2paddle_261, shape=[1])
        x2paddle_171 = self.relu4(x2paddle_170)
        x2paddle_264 = paddle.concat(x=[x2paddle_262, x2paddle_263])
        x2paddle_172 = self.conv5(x2paddle_171)
        x2paddle_271 = paddle.cast(x=x2paddle_264, dtype='int64')
        x2paddle_173 = self.batchnorm5(x2paddle_172)
        x2paddle_174 = self.relu5(x2paddle_173)
        x2paddle_175 = self.conv6(x2paddle_174)
        x2paddle_230 = paddle.shape(input=x2paddle_174)
        x2paddle_230 = paddle.cast(x=x2paddle_230, dtype='int64')
        x2paddle_233 = paddle.shape(input=x2paddle_174)
        x2paddle_233 = paddle.cast(x=x2paddle_233, dtype='int64')
        x2paddle_176 = self.batchnorm6(x2paddle_175)
        x2paddle_232 = paddle.gather(x=x2paddle_230, index=x2paddle_231)
        x2paddle_235 = paddle.gather(x=x2paddle_233, index=x2paddle_234)
        x2paddle_177 = self.relu6(x2paddle_176)
        x2paddle_236 = paddle.reshape(x=x2paddle_232, shape=[1])
        x2paddle_237 = paddle.reshape(x=x2paddle_235, shape=[1])
        x2paddle_178 = self.pool2(x2paddle_177)
        x2paddle_238 = paddle.concat(x=[x2paddle_236, x2paddle_237])
        x2paddle_179 = self.conv7(x2paddle_178)
        x2paddle_245 = paddle.cast(x=x2paddle_238, dtype='int64')
        x2paddle_180 = self.batchnorm7(x2paddle_179)
        x2paddle_181 = self.relu7(x2paddle_180)
        x2paddle_182 = self.conv8(x2paddle_181)
        x2paddle_183 = self.batchnorm8(x2paddle_182)
        x2paddle_184 = self.relu8(x2paddle_183)
        x2paddle_185 = self.conv9(x2paddle_184)
        x2paddle_204 = paddle.shape(input=x2paddle_184)
        x2paddle_204 = paddle.cast(x=x2paddle_204, dtype='int64')
        x2paddle_207 = paddle.shape(input=x2paddle_184)
        x2paddle_207 = paddle.cast(x=x2paddle_207, dtype='int64')
        x2paddle_186 = self.batchnorm9(x2paddle_185)
        x2paddle_206 = paddle.gather(x=x2paddle_204, index=x2paddle_205)
        x2paddle_209 = paddle.gather(x=x2paddle_207, index=x2paddle_208)
        x2paddle_187 = self.relu9(x2paddle_186)
        x2paddle_210 = paddle.reshape(x=x2paddle_206, shape=[1])
        x2paddle_211 = paddle.reshape(x=x2paddle_209, shape=[1])
        x2paddle_188 = self.pool3(x2paddle_187)
        x2paddle_212 = paddle.concat(x=[x2paddle_210, x2paddle_211])
        x2paddle_189 = self.conv10(x2paddle_188)
        x2paddle_219 = paddle.cast(x=x2paddle_212, dtype='int64')
        x2paddle_190 = self.batchnorm10(x2paddle_189)
        x2paddle_191 = self.relu10(x2paddle_190)
        x2paddle_192 = self.conv11(x2paddle_191)
        x2paddle_193 = self.batchnorm11(x2paddle_192)
        x2paddle_194 = self.pool4(x2paddle_193)
        x2paddle_195 = self.conv12(x2paddle_194)
        x2paddle_196 = self.conv13(x2paddle_195)
        x2paddle_197 = paddle.concat(x=[x2paddle_196, x2paddle_193], axis=1)
        x2paddle_198 = self.conv14(x2paddle_197)
        x2paddle_199 = self.batchnorm12(x2paddle_198)
        x2paddle_200 = self.relu11(x2paddle_199)
        x2paddle_201 = self.conv15(x2paddle_200)
        x2paddle_202 = self.batchnorm13(x2paddle_201)
        x2paddle_203 = self.relu12(x2paddle_202)
        x2paddle_214 = paddle.shape(input=x2paddle_203)
        x2paddle_214 = paddle.cast(x=x2paddle_214, dtype='int64')
        x2paddle_218 = paddle.slice(input=x2paddle_214, axes=[0], starts=[0], ends=[2])
        x2paddle_220 = paddle.concat(x=[x2paddle_218, x2paddle_219])
        x2paddle_220_nc,x2paddle_220_hw = paddle.split(x=x2paddle_220, num_or_sections=[2, 2])
        x2paddle_220_hw = paddle.cast(x=x2paddle_220_hw, dtype='int32')
        x2paddle_222 = paddle.nn.functional.interpolate(x=x2paddle_203, size=x2paddle_220_hw, mode='bilinear')
        x2paddle_223 = paddle.concat(x=[x2paddle_222, x2paddle_184], axis=1)
        x2paddle_224 = self.conv16(x2paddle_223)
        x2paddle_225 = self.batchnorm14(x2paddle_224)
        x2paddle_226 = self.relu13(x2paddle_225)
        x2paddle_227 = self.conv17(x2paddle_226)
        x2paddle_228 = self.batchnorm15(x2paddle_227)
        x2paddle_229 = self.relu14(x2paddle_228)
        x2paddle_240 = paddle.shape(input=x2paddle_229)
        x2paddle_240 = paddle.cast(x=x2paddle_240, dtype='int64')
        x2paddle_244 = paddle.slice(input=x2paddle_240, axes=[0], starts=[0], ends=[2])
        x2paddle_246 = paddle.concat(x=[x2paddle_244, x2paddle_245])
        x2paddle_246_nc,x2paddle_246_hw = paddle.split(x=x2paddle_246, num_or_sections=[2, 2])
        x2paddle_246_hw = paddle.cast(x=x2paddle_246_hw, dtype='int32')
        x2paddle_248 = paddle.nn.functional.interpolate(x=x2paddle_229, size=x2paddle_246_hw, mode='bilinear')
        x2paddle_249 = paddle.concat(x=[x2paddle_248, x2paddle_174], axis=1)
        x2paddle_250 = self.conv18(x2paddle_249)
        x2paddle_251 = self.batchnorm16(x2paddle_250)
        x2paddle_252 = self.relu15(x2paddle_251)
        x2paddle_253 = self.conv19(x2paddle_252)
        x2paddle_254 = self.batchnorm17(x2paddle_253)
        x2paddle_255 = self.relu16(x2paddle_254)
        x2paddle_266 = paddle.shape(input=x2paddle_255)
        x2paddle_266 = paddle.cast(x=x2paddle_266, dtype='int64')
        x2paddle_270 = paddle.slice(input=x2paddle_266, axes=[0], starts=[0], ends=[2])
        x2paddle_272 = paddle.concat(x=[x2paddle_270, x2paddle_271])
        x2paddle_272_nc,x2paddle_272_hw = paddle.split(x=x2paddle_272, num_or_sections=[2, 2])
        x2paddle_272_hw = paddle.cast(x=x2paddle_272_hw, dtype='int32')
        x2paddle_274 = paddle.nn.functional.interpolate(x=x2paddle_255, size=x2paddle_272_hw, mode='bilinear')
        x2paddle_275 = paddle.concat(x=[x2paddle_274, x2paddle_167], axis=1)
        x2paddle_276 = self.conv20(x2paddle_275)
        x2paddle_277 = self.batchnorm18(x2paddle_276)
        x2paddle_278 = self.relu17(x2paddle_277)
        x2paddle_279 = self.conv21(x2paddle_278)
        x2paddle_280 = self.batchnorm19(x2paddle_279)
        x2paddle_281 = self.relu18(x2paddle_280)
        x2paddle_282 = self.conv22(x2paddle_281)
        x2paddle_283 = self.relu19(x2paddle_282)
        x2paddle_284 = self.conv23(x2paddle_283)
        x2paddle_285 = self.relu20(x2paddle_284)
        x2paddle_286 = self.conv24(x2paddle_285)
        x2paddle_287 = self.relu21(x2paddle_286)
        x2paddle_288 = self.conv25(x2paddle_287)
        x2paddle_289 = self.relu22(x2paddle_288)
        x2paddle_290 = self.conv26(x2paddle_289)
        x2paddle_output = paddle.transpose(x=x2paddle_290, perm=[0, 2, 3, 1])
        return x2paddle_output, x2paddle_281

def main(x2paddle_input):
    # There are 1 inputs.
    # x2paddle_input: shape-[1, 3, -1, -1], type-float32.
    paddle.disable_static()
    params = paddle.load('/Volumes/storage/projects/python/craft-det/pd_model/model.pdparams')
    model = ONNXModel()
    model.set_dict(params, use_structured_name=True)
    model.eval()
    out = model(x2paddle_input)
    return out

if __name__ == '__main__':
    from skimage import io
    import numpy as np
    import imgproc
    import craft_utils
    import cv2

    image_path = "./data/ug03.jpg"
    image = cv2.imread(image_path)
    #image = cv2.resize(image,(96,64))
    print(image.shape)
    # image, target_ratio, size_heatmap = imgproc.resize_aspect_ratio(image, 960,
    #                                                                       interpolation=cv2.INTER_LINEAR,
    #                                                                       mag_ratio=1.5)
    # print(image.shape, target_ratio, size_heatmap)
    # ratio_h = ratio_w = 1 / target_ratio
    x = imgproc.normalizeMeanVariance(image)
    x = paddle.Tensor(x)
    x = paddle.transpose(x,(2,0,1))
    x = paddle.unsqueeze(x,0)
    y, feature = main(x)
    # make score and link map
    score_text = y[0, :, :, 0].numpy()
    score_link = y[0, :, :, 1].numpy()
    #print(score_text.shape,score_link.shape)
    # Post-processing
    #boxes, polys = craft_utils.getDetBoxes(score_text, score_link, text_threshold=0.7, link_threshold=0.4, low_text=0.4, poly=False)
    boxes, _, _ = craft_utils.getDetBoxes_core(score_text, score_link, text_threshold=0.7, link_threshold=0.4, low_text=0.4)
    # coordinate adjustment
    boxes = craft_utils.adjustResultCoordinates(boxes, 1, 1)
    for box in boxes:
        box = np.array(box).astype(np.int32)
        print(box)
        print("==================")
        cv2.polylines(image, [box.reshape((-1, 1, 2))], True, color=(0, 0, 255), thickness=2)

    cv2.imwrite("./data/vis.jpg",image)